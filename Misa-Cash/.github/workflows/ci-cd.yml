name: Misa Cash CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: misa_cash_test
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend Tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install backend dependencies
        run: |
          cd src/web/backend
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run backend tests
        run: |
          cd src/web/backend
          pytest --cov=. --cov-report=xml tests/

      # Frontend Tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/web/frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd src/web/frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd src/web/frontend
          npm test -- --coverage

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./src/web/backend/coverage.xml,./src/web/frontend/coverage/coverage-final.json

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Backend Linting
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install backend linting tools
        run: |
          pip install flake8 black

      - name: Run backend linting
        run: |
          cd src/web/backend
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .

      # Frontend Linting
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/web/frontend/package-lock.json

      - name: Install frontend linting tools
        run: |
          cd src/web/frontend
          npm ci

      - name: Run frontend linting
        run: |
          cd src/web/frontend
          npm run lint

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test, lint]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: misa_cash_test
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install performance testing dependencies
        run: |
          cd src/web/backend
          pip install -r requirements.txt
          pip install locust pytest pytest-benchmark requests matplotlib numpy pymysql
          
      - name: Set up backend for testing
        run: |
          cd src/web/backend
          python setup_test_db.py
          python app.py &
          sleep 5
          
      - name: Run API endpoint benchmark tests
        run: |
          cd src/web/backend/tests/performance
          python api_benchmark.py --url http://localhost:5000 --iterations 20 || true
          
      - name: Run database performance tests
        run: |
          cd src/web/backend/tests/performance
          python db_performance.py --host localhost --user root --password root --database misa_cash_test --iterations 20 || true
          
      - name: Run Locust load tests (headless)
        run: |
          cd src/web/backend/tests/performance
          locust -f locustfile.py --headless -u 10 -r 2 --run-time 1m --host http://localhost:5000
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            src/web/backend/tests/performance/benchmark_results_*.json
            src/web/backend/tests/performance/db_benchmark_results_*.json
            src/web/backend/tests/performance/*.png

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Build Backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Build backend
        run: |
          cd src/web/backend
          pip install wheel
          python setup.py bdist_wheel

      # Build Frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd src/web/frontend
          npm ci

      - name: Build frontend
        run: |
          cd src/web/frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            src/web/backend/dist/
            src/web/frontend/build/

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: artifacts

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to production
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ~/misa-cash/backend ~/misa-cash/frontend"
          scp -r artifacts/src/web/backend/dist/* ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/misa-cash/backend/
          scp -r artifacts/src/web/frontend/build/* ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/misa-cash/frontend/
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd ~/misa-cash && docker-compose up -d --build"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install security scanning tools
        run: |
          pip install bandit safety

      - name: Run Python dependency check
        run: |
          cd src/web/backend
          safety check -r requirements.txt || true

      - name: Run Python code security scan
        run: |
          cd src/web/backend
          bandit -r . -x tests || true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Run npm audit
        run: |
          cd src/web/frontend
          npm audit || true

      # Use Snyk para escaneamento de vulnerabilidades
      - name: Run Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects

      # Use CodeQL para análise de segurança
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2 